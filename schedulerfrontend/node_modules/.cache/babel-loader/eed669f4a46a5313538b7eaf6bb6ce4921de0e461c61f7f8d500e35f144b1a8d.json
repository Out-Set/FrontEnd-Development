{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"homePage\",\n  data() {\n    return {\n      name: \"Cron Dashboard\",\n      taskTypes: ['proc', 'api', 'method'],\n      taskType: 'proc',\n      taskNames: [],\n      taskName: '',\n      taskStartStop: '',\n      tasksWithStatus: [],\n      ip: 'localhost'\n    };\n  },\n  // 8081/BitsFlow-App\n  mounted() {\n    axios.get('http://' + this.ip + ':8081/BitsFlow-App/scheduledTask/findTaskName/proc') // bitsflow-intg\n    // axios.get('http://localhost:8082/scheduledTask/findTaskName/proc') // Dynamic-Cron\n    .then(response => {\n      console.log(\"Response form Backend: \", response);\n      this.taskNames = response.data;\n      this.taskName = this.taskNames[0];\n      this.taskStartStop = this.taskNames[0];\n\n      //save list of tasks to Local Storage\n      localStorage.setItem('taskNames', JSON.stringify(response.data));\n      localStorage.setItem('taskType', this.taskType);\n    }).catch(error => {\n      // Handle the error\n      console.log(\"Error Occured!\", error);\n    });\n\n    // Tasks with status\n    axios.get('http://' + this.ip + ':8081/BitsFlow-App/scheduledTask/tasksWithStatus') // bitsflow-intg\n    // axios.get('http://localhost:8082/scheduledTask/tasksWithStatus') // Dynamic-Cron\n    .then(response => {\n      console.log(\"tasksWithStatus form Backend: \", response);\n      this.tasksWithStatus = [];\n      this.tasksWithStatus = response.data;\n    }).catch(error => {\n      // Handle the error\n      console.log(\"Error Occured!\", error);\n    });\n  },\n  watch: {\n    taskType(taskType) {\n      console.log('Task Type: ', taskType);\n      localStorage.setItem('taskType', this.taskType);\n    }\n  },\n  methods: {\n    setTaskToLS() {\n      localStorage.setItem('taskName', this.taskName);\n    },\n    stopTask(taskStartStop) {\n      console.log('task-name: ', taskStartStop);\n      axios.post('http://' + this.ip + ':8081/BitsFlow-App/tasks/stop?taskName=' + taskStartStop) // bitsflow-intg\n      // axios.post('http://localhost:8082/tasks/stop?taskName=' + taskStartStop) // Dynamic-Cron\n      .then(response => {\n        console.log(\"Response form Backend: \", response);\n        this.logs = response.data;\n        location.reload();\n      }).catch(error => {\n        // Handle the error\n        console.log(\"Error Occured!\", error);\n      });\n    },\n    startAtInit(taskStartStop) {\n      console.log('task-name: ', taskStartStop);\n      axios.post('http://' + this.ip + ':8081/BitsFlow-App/tasks/start?taskName=' + taskStartStop) // bitsflow-intg\n      // axios.post('http://localhost:8082/tasks/start?taskName=' + taskStartStop) // Dynamic-Cron\n      .then(response => {\n        console.log(\"Response form Backend: \", response);\n        this.logs = response.data;\n        location.reload();\n      }).catch(error => {\n        // Handle the error\n        console.log(\"Error Occured!\", error);\n      });\n    },\n    fetchTaskNames() {\n      console.log('Task type selected:', this.taskType);\n      axios.get('http://' + this.ip + ':8081/BitsFlow-App/scheduledTask/findTaskName/' + this.taskType) // bitsflow-intg\n      // axios.get('http://localhost:8082/scheduledTask/findTaskName/' + this.taskType) // Dynamic-Cron\n      .then(response => {\n        console.log(\"Response form Backend: \", response);\n        this.taskNames = response.data;\n        this.taskName = this.taskNames[0];\n        this.taskStartStop = this.taskNames[0];\n\n        //save list of tasks to Local Storage\n        localStorage.setItem('taskNames', JSON.stringify(response.data));\n      }).catch(error => {\n        // Handle the error\n        console.log(\"Error Occured!\", error);\n      });\n    },\n    makeApiCall() {\n      const requestData = {\n        category: 'individual-pii-data',\n        type: 'pan-detail-v2',\n        applicationId: 'Dashboard-realtime-KYC',\n        data: {\n          panNumber: 'skhuw'\n        },\n        mode: 'TEST'\n      };\n      axios.get('http://localhost:8081/BitsFlow-App/panVerification').then(response => {\n        console.log(\"Response form Backend: \", response);\n      }).catch(error => {\n        // Handle the error\n        console.log(\"Error Occured!\", error);\n      });\n      console.log(\"Called Verification ::\");\n      const apiUrl = 'http://localhost:8081/BitsFlow-App/panVerification';\n      try {\n        const response = axios.post(apiUrl, requestData);\n        console.log('API Response:', response.data);\n      } catch (error) {\n        console.error('API Error:', error.message); // Log the error message\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","taskTypes","taskType","taskNames","taskName","taskStartStop","tasksWithStatus","ip","mounted","get","then","response","console","log","localStorage","setItem","JSON","stringify","catch","error","watch","methods","setTaskToLS","stopTask","post","logs","location","reload","startAtInit","fetchTaskNames","makeApiCall","requestData","category","type","applicationId","panNumber","mode","apiUrl","message"],"sources":["C:\\Users\\admin\\Desktop\\Working On\\FrontEnd-Development\\schedulerfrontend\\src\\components\\home.vue"],"sourcesContent":["<template>\r\n    <div class=\"master container-fluid\">\r\n        <div class=\"heading row\">\r\n            <h3>{{ name }}</h3>\r\n        </div>\r\n\r\n        <div class=\"mt-2\">\r\n            Select Task Type\r\n            <select v-model=\"taskType\" @change=\"fetchTaskNames()\" style=\"width: 100px;\">\r\n                <option v-for=\"taskType in taskTypes\" :key=\"taskType\" :value=\"taskType\">{{ taskType }}</option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"setAndViewLogs row\">\r\n\r\n            <!-- Set Expression -->\r\n            <div>\r\n                <p class=\"main\">Reset Cron Value</p>\r\n                <select v-model=\"taskName\" style=\"width: 100px;\">\r\n                    <option v-for=\"taskName in taskNames\" :key=\"taskName\" :value=\"taskName\">{{ taskName }}</option>\r\n                </select>&nbsp;\r\n\r\n                <router-link to=\"/scheduleTask\">\r\n                    <button v-on:click=\"setTaskToLS()\" class=\"btn btn-primary btn-sm\"\r\n                        :class=\"{ active: this.$route.path === '/scheduleTask' }\" aria-current=\"page\">Reset\r\n                    </button>\r\n                </router-link>\r\n            </div>\r\n\r\n            <!-- Stop prog Execution -->\r\n            <div>\r\n                <p class=\"main\">Stop and Start</p>\r\n                <select v-model=\"taskStartStop\" style=\"width: 100px;\">\r\n                    <option v-for=\"taskName in taskNames\" :key=\"taskName\" :value=\"taskName\">{{ taskName }}</option>\r\n                </select>&nbsp;\r\n                <button class=\"btn btn-primary btn-sm\" v-on:click=\"stopTask(this.taskStartStop)\">Stop</button>&nbsp;\r\n                <button class=\"btn btn-primary btn-sm\" v-on:click=\"startAtInit(this.taskStartStop)\">Start</button>\r\n            </div>\r\n\r\n            <!-- View Logs -->\r\n            <div>\r\n                <p class=\"main\">Common Logs</p>\r\n                <router-link to=\"/commonLogs\">\r\n                    <button class=\"btn btn-primary btn-sm\" :class=\"{ active: this.$route.path === '/commonLogs' }\"\r\n                        aria-current=\"page\">View\r\n                    </button>\r\n                </router-link>\r\n            </div>\r\n        </div>\r\n        <div style=\"height: 1px; background: black; margin-top: 50px\"></div>\r\n\r\n        <div>\r\n            <p class=\"main\" style=\"background-color: burlywood;\">All Tasks With Status</p>\r\n\r\n            <div class=\"allDataDiv\" style=\"\">\r\n                <table class=\"table table-hover\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">TaskID</th>\r\n                            <th scope=\"col\">Task Type</th>\r\n                            <th scope=\"col\">Task Name</th>\r\n                            <th scope=\"col\">STATUS</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr v-for=\"data in (tasksWithStatus)\" :key=\"data.jobName\">\r\n                            <td>{{ data.id }}</td>\r\n                            <td>{{ data.taskType }}</td>\r\n                            <td>{{ data.taskName }}</td>\r\n                            <td> {{ data.status }} </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div>\r\n            <button @click=\"makeApiCall()\" class=\"btn btn-primary btn-sm\">click me</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: \"homePage\",\r\n    data() {\r\n        return {\r\n            name: \"Cron Dashboard\",\r\n\r\n            taskTypes: ['proc', 'api', 'method'],\r\n            taskType: 'proc',\r\n\r\n            taskNames: [],\r\n            taskName: '',\r\n\r\n            taskStartStop: '',\r\n\r\n            tasksWithStatus: [],\r\n\r\n            ip: 'localhost'\r\n        }\r\n    },\r\n    // 8081/BitsFlow-App\r\n    mounted() {\r\n        axios.get('http://' + this.ip + ':8081/BitsFlow-App/scheduledTask/findTaskName/proc') // bitsflow-intg\r\n            // axios.get('http://localhost:8082/scheduledTask/findTaskName/proc') // Dynamic-Cron\r\n            .then((response) => {\r\n                console.log(\"Response form Backend: \", response);\r\n                this.taskNames = response.data\r\n                this.taskName = this.taskNames[0]\r\n                this.taskStartStop = this.taskNames[0]\r\n\r\n                //save list of tasks to Local Storage\r\n                localStorage.setItem('taskNames', JSON.stringify(response.data));\r\n                localStorage.setItem('taskType', this.taskType);\r\n            })\r\n            .catch((error) => {\r\n                // Handle the error\r\n                console.log(\"Error Occured!\", error);\r\n            })\r\n\r\n        // Tasks with status\r\n        axios.get('http://' + this.ip + ':8081/BitsFlow-App/scheduledTask/tasksWithStatus') // bitsflow-intg\r\n            // axios.get('http://localhost:8082/scheduledTask/tasksWithStatus') // Dynamic-Cron\r\n            .then((response) => {\r\n                console.log(\"tasksWithStatus form Backend: \", response);\r\n                this.tasksWithStatus = [];\r\n                this.tasksWithStatus = response.data\r\n            })\r\n            .catch((error) => {\r\n                // Handle the error\r\n                console.log(\"Error Occured!\", error);\r\n            })\r\n    },\r\n\r\n    watch: {\r\n        taskType(taskType) {\r\n            console.log('Task Type: ', taskType);\r\n            localStorage.setItem('taskType', this.taskType);\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        setTaskToLS() {\r\n            localStorage.setItem('taskName', this.taskName);\r\n        },\r\n\r\n        stopTask(taskStartStop) {\r\n            console.log('task-name: ', taskStartStop);\r\n            axios.post('http://' + this.ip + ':8081/BitsFlow-App/tasks/stop?taskName=' + taskStartStop) // bitsflow-intg\r\n                // axios.post('http://localhost:8082/tasks/stop?taskName=' + taskStartStop) // Dynamic-Cron\r\n                .then((response) => {\r\n                    console.log(\"Response form Backend: \", response);\r\n                    this.logs = response.data\r\n                    location.reload();\r\n                })\r\n                .catch((error) => {\r\n                    // Handle the error\r\n                    console.log(\"Error Occured!\", error);\r\n                })\r\n        },\r\n\r\n        startAtInit(taskStartStop) {\r\n            console.log('task-name: ', taskStartStop);\r\n            axios.post('http://' + this.ip + ':8081/BitsFlow-App/tasks/start?taskName=' + taskStartStop) // bitsflow-intg\r\n                // axios.post('http://localhost:8082/tasks/start?taskName=' + taskStartStop) // Dynamic-Cron\r\n                .then((response) => {\r\n                    console.log(\"Response form Backend: \", response);\r\n                    this.logs = response.data\r\n                    location.reload();\r\n                })\r\n                .catch((error) => {\r\n                    // Handle the error\r\n                    console.log(\"Error Occured!\", error);\r\n                })\r\n        },\r\n\r\n        fetchTaskNames() {\r\n            console.log('Task type selected:', this.taskType);\r\n            axios.get('http://' + this.ip + ':8081/BitsFlow-App/scheduledTask/findTaskName/' + this.taskType) // bitsflow-intg\r\n                // axios.get('http://localhost:8082/scheduledTask/findTaskName/' + this.taskType) // Dynamic-Cron\r\n                .then((response) => {\r\n                    console.log(\"Response form Backend: \", response);\r\n                    this.taskNames = response.data\r\n                    this.taskName = this.taskNames[0]\r\n                    this.taskStartStop = this.taskNames[0]\r\n\r\n                    //save list of tasks to Local Storage\r\n                    localStorage.setItem('taskNames', JSON.stringify(response.data));\r\n                })\r\n                .catch((error) => {\r\n                    // Handle the error\r\n                    console.log(\"Error Occured!\", error);\r\n                })\r\n        },\r\n\r\n        makeApiCall() {\r\n\r\n            const requestData = {\r\n                category: 'individual-pii-data',\r\n                type: 'pan-detail-v2',\r\n                applicationId: 'Dashboard-realtime-KYC',\r\n                data: {\r\n                    panNumber: 'skhuw',\r\n                },\r\n                mode: 'TEST',\r\n            };\r\n\r\n            axios.get('http://localhost:8081/BitsFlow-App/panVerification', )\r\n                .then((response) => {\r\n                    console.log(\"Response form Backend: \", response);\r\n                })\r\n                .catch((error) => {\r\n                    // Handle the error\r\n                    console.log(\"Error Occured!\", error);\r\n                })\r\n\r\n            console.log(\"Called Verification ::\");\r\n            const apiUrl = 'http://localhost:8081/BitsFlow-App/panVerification';\r\n\r\n            \r\n\r\n            try {\r\n                const response = axios.post(apiUrl, requestData);\r\n                console.log('API Response:', response.data);\r\n            } catch (error) {\r\n                console.error('API Error:', error.message); // Log the error message\r\n            }\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.master {\r\n    margin-top: 0px;\r\n    padding-top: 0px;\r\n    background: lightblue;\r\n    height: 251px;\r\n}\r\n\r\n.heading {\r\n    height: 45px;\r\n    background: lightcoral;\r\n    padding-top: 9px;\r\n    padding-left: 16px;\r\n}\r\n\r\n.main {\r\n    text-decoration: underline;\r\n    /* margin-bottom: 5px; */\r\n}\r\n\r\n.setAndViewLogs {\r\n    display: grid;\r\n    grid-template-columns: auto auto auto;\r\n    margin-top: 50px;\r\n}\r\n\r\nselect {\r\n    /* padding: 5px 10px 0px 10px; */\r\n    padding-top: 6px;\r\n    padding-left: 7px;\r\n}\r\n\r\nbutton {\r\n    border: none;\r\n    border-radius: 3px;\r\n    margin-bottom: 10px;\r\n    padding: 4px 20px;\r\n}\r\n\r\nbutton:hover {\r\n    background: #1397AA;\r\n    color: white;\r\n}\r\n\r\n.allDataDiv {\r\n    padding: auto;\r\n    width: 100%;\r\n    height: 410px;\r\n    overflow: scroll;\r\n}\r\n\r\n.table {\r\n    width: 1275px;\r\n}\r\n\r\nthead tr th {\r\n    background-color: lightskyblue;\r\n    font-size: 14px;\r\n}\r\n\r\ntbody tr td {\r\n    font-size: 12px;\r\n}\r\n\r\nthead {\r\n    position: sticky;\r\n    top: 0;\r\n}\r\n</style>\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}