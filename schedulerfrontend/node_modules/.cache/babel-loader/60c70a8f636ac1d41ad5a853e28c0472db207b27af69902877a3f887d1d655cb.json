{"ast":null,"code":"import { get, post } from '../../callAPI';\nexport default {\n  name: \"schedulerHome\",\n  components: {},\n  data() {\n    return {\n      name: \"Cron Dashboard\",\n      taskTypes: ['proc', 'api', 'method'],\n      taskType: 'proc',\n      taskNames: [],\n      taskName: '',\n      taskStartStop: '',\n      tasksWithStatus: []\n    };\n  },\n  mounted() {\n    get('/scheduledTask/findTaskName/proc').then(response => {\n      console.log(\"Response form Backend: \", response);\n      this.taskNames = response.data;\n      this.taskName = this.taskNames[0];\n      this.taskStartStop = this.taskNames[0];\n\n      //save list of tasks to Local Storage\n      localStorage.setItem('taskNames', JSON.stringify(response.data));\n      localStorage.setItem('taskType', this.taskType);\n    }).catch(error => {\n      // Handle the error\n      console.log(\"Error Occured!\", error);\n    });\n\n    // Tasks with status\n    get('/scheduledTask/tasksWithStatus').then(response => {\n      console.log(\"tasksWithStatus form Backend: \", response);\n      this.tasksWithStatus = [];\n      this.tasksWithStatus = response.data;\n    }).catch(error => {\n      // Handle the error\n      console.log(\"Error Occured!\", error);\n    });\n  },\n  watch: {\n    taskType(taskType) {\n      console.log('Task Type: ', taskType);\n      localStorage.setItem('taskType', this.taskType);\n    }\n  },\n  methods: {\n    setTaskToLS() {\n      localStorage.setItem('taskName', this.taskName);\n    },\n    stopTask(taskStartStop) {\n      console.log('task-name: ', taskStartStop);\n      post('/tasks/stop?taskName=' + taskStartStop).then(response => {\n        console.log(\"Response form Backend: \", response);\n        this.logs = response.data;\n        location.reload();\n      }).catch(error => {\n        // Handle the error\n        console.log(\"Error Occured!\", error);\n      });\n    },\n    startAtInit(taskStartStop) {\n      console.log('task-name: ', taskStartStop);\n      post('/tasks/start?taskName=' + taskStartStop).then(response => {\n        console.log(\"Response form Backend: \", response);\n        this.logs = response.data;\n        location.reload();\n      }).catch(error => {\n        // Handle the error\n        console.log(\"Error Occured!\", error);\n      });\n    },\n    fetchTaskNames() {\n      console.log('Task type selected:', this.taskType);\n      get('/scheduledTask/findTaskName/' + this.taskType).then(response => {\n        console.log(\"Response form Backend: \", response);\n        this.taskNames = response.data;\n        this.taskName = this.taskNames[0];\n        this.taskStartStop = this.taskNames[0];\n\n        //save list of tasks to Local Storage\n        localStorage.setItem('taskNames', JSON.stringify(response.data));\n      }).catch(error => {\n        // Handle the error\n        console.log(\"Error Occured!\", error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["get","post","name","components","data","taskTypes","taskType","taskNames","taskName","taskStartStop","tasksWithStatus","mounted","then","response","console","log","localStorage","setItem","JSON","stringify","catch","error","watch","methods","setTaskToLS","stopTask","logs","location","reload","startAtInit","fetchTaskNames"],"sources":["C:\\Users\\admin\\Documents\\Files\\FrontEnd-Development\\schedulerfrontend\\src\\components\\Scheduler\\schedulerHome.vue"],"sourcesContent":["<template>\n\n    <div class=\"master container-fluid\">\n        <div class=\"allData\">\n            <div class=\"heading\">\n                <h3>{{ name }}</h3>\n            </div>\n\n            <div class=\"mt-2\">\n                Select Task Type\n                <select v-model=\"taskType\" @change=\"fetchTaskNames()\" style=\"width: 100px;\">\n                    <option v-for=\"taskType in taskTypes\" :key=\"taskType\" :value=\"taskType\">{{ taskType }}</option>\n                </select>\n            </div>\n\n            <div class=\"setAndViewLogs row\">\n\n                <!-- ReSet Expression -->\n                <div>\n                    <p class=\"main\">Reset Cron Value</p>\n                    <select v-model=\"taskName\" style=\"width: 100px;\">\n                        <option v-for=\"taskName in taskNames\" :key=\"taskName\" :value=\"taskName\">{{ taskName }}</option>\n                    </select>&nbsp;\n\n                    <router-link to=\"/scheduleTask\">\n                        <button v-on:click=\"setTaskToLS()\" class=\"btn btn-primary btn-sm\"\n                            :class=\"{ active: this.$route.path === '/scheduleTask' }\" aria-current=\"page\">Reset\n                        </button>\n                    </router-link>\n                </div>\n\n                <!-- Stop Job Execution -->\n                <div>\n                    <p class=\"main\">Stop and Start</p>\n                    <select v-model=\"taskStartStop\" style=\"width: 100px;\">\n                        <option v-for=\"taskName in taskNames\" :key=\"taskName\" :value=\"taskName\">{{ taskName }}</option>\n                    </select>&nbsp;\n                    <button class=\"btn btn-primary btn-sm\" v-on:click=\"stopTask(this.taskStartStop)\">Stop</button>&nbsp;\n                    <button class=\"btn btn-primary btn-sm\" v-on:click=\"startAtInit(this.taskStartStop)\">Start</button>\n                </div>\n\n                <!-- View Logs -->\n                <div>\n                    <p class=\"main\">Common Logs</p>\n                    <router-link to=\"/commonLogs\">\n                        <button class=\"btn btn-primary btn-sm\" :class=\"{ active: this.$route.path === '/commonLogs' }\"\n                            aria-current=\"page\">View\n                        </button>\n                    </router-link>\n                </div>\n            </div>\n            <div style=\"height: 1px; background: black; margin-top: 50px;\"></div>\n\n            <div>\n                <p class=\"main\" style=\"background-color: burlywood;  margin-bottom: 0px;\">All Tasks With Status</p>\n\n                <div class=\"allDataDiv\" style=\"\">\n                    <table class=\"table table-hover\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">TaskID</th>\n                                <th scope=\"col\">Task Type</th>\n                                <th scope=\"col\">Task Name</th>\n                                <th scope=\"col\">STATUS</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr v-for=\"data in (tasksWithStatus)\" :key=\"data.jobName\">\n                                <td>{{ data.id }}</td>\n                                <td>{{ data.taskType }}</td>\n                                <td>{{ data.taskName }}</td>\n                                <td> {{ data.status }} </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n            </div>\n\n            <div>\n                <router-link to=\"/integrationHome\">\n                    <button class=\"btn btn-primary btn-sm\" :class=\"{ active: this.$route.path === '/integrationHome' }\"\n                        aria-current=\"page\">VERIFY PAN & AADHAAR\n                    </button>\n                </router-link>\n            </div>\n        </div>\n\n    </div>\n</template>\n\n<script>\nimport { get, post } from '../../callAPI'\n\nexport default {\n    name: \"schedulerHome\",\n    components: {\n    },\n    data() {\n        return {\n            name: \"Cron Dashboard\",\n\n            taskTypes: ['proc', 'api', 'method'],\n            taskType: 'proc',\n\n            taskNames: [],\n            taskName: '',\n\n            taskStartStop: '',\n\n            tasksWithStatus: [],\n        }\n    },\n\n    mounted() {\n        get('/scheduledTask/findTaskName/proc')\n            .then((response) => {\n                console.log(\"Response form Backend: \", response);\n                this.taskNames = response.data\n                this.taskName = this.taskNames[0]\n                this.taskStartStop = this.taskNames[0]\n\n                //save list of tasks to Local Storage\n                localStorage.setItem('taskNames', JSON.stringify(response.data));\n                localStorage.setItem('taskType', this.taskType);\n            })\n            .catch((error) => {\n                // Handle the error\n                console.log(\"Error Occured!\", error);\n            })\n\n        // Tasks with status\n        get('/scheduledTask/tasksWithStatus')\n            .then((response) => {\n                console.log(\"tasksWithStatus form Backend: \", response);\n                this.tasksWithStatus = [];\n                this.tasksWithStatus = response.data\n            })\n            .catch((error) => {\n                // Handle the error\n                console.log(\"Error Occured!\", error);\n            })\n    },\n\n    watch: {\n        taskType(taskType) {\n            console.log('Task Type: ', taskType);\n            localStorage.setItem('taskType', this.taskType);\n        }\n    },\n\n    methods: {\n        setTaskToLS() {\n            localStorage.setItem('taskName', this.taskName);\n        },\n\n        stopTask(taskStartStop) {\n            console.log('task-name: ', taskStartStop);\n            post('/tasks/stop?taskName=' + taskStartStop)\n                .then((response) => {\n                    console.log(\"Response form Backend: \", response);\n                    this.logs = response.data\n                    location.reload();\n                })\n                .catch((error) => {\n                    // Handle the error\n                    console.log(\"Error Occured!\", error);\n                })\n        },\n\n        startAtInit(taskStartStop) {\n            console.log('task-name: ', taskStartStop);\n            post('/tasks/start?taskName=' + taskStartStop)\n                .then((response) => {\n                    console.log(\"Response form Backend: \", response);\n                    this.logs = response.data\n                    location.reload();\n                })\n                .catch((error) => {\n                    // Handle the error\n                    console.log(\"Error Occured!\", error);\n                })\n        },\n\n        fetchTaskNames() {\n            console.log('Task type selected:', this.taskType);\n            get('/scheduledTask/findTaskName/' + this.taskType)\n                .then((response) => {\n                    console.log(\"Response form Backend: \", response);\n                    this.taskNames = response.data\n                    this.taskName = this.taskNames[0]\n                    this.taskStartStop = this.taskNames[0]\n\n                    //save list of tasks to Local Storage\n                    localStorage.setItem('taskNames', JSON.stringify(response.data));\n                })\n                .catch((error) => {\n                    // Handle the error\n                    console.log(\"Error Occured!\", error);\n                })\n        },\n    }\n}\n</script>\n\n<style scoped>\n\n@media (max-width: 767px) {\n    .master {\n        margin-left: 1%;\n    }\n}\n\n.allData{\n    text-align: center;\n    justify-content: center;\n}\n\n.heading {\n    height: 45px;\n    background: rgb(247, 149, 238);\n    padding-top: 9px;\n    padding-left: 16px;\n    display: flex;\n    justify-content: center;\n}\n\n.main {\n    text-decoration: underline;\n}\n\n.setAndViewLogs {\n    display: grid;\n    grid-template-columns: auto auto auto;\n    margin-top: 50px;\n}\n\nselect {\n    padding-top: 6px;\n    padding-left: 7px;\n}\n\nbutton {\n    border: none;\n    border-radius: 3px;\n    margin-bottom: 10px;\n    padding: 4px 20px;\n}\n\nbutton:hover {\n    background: #1397AA;\n    color: white;\n}\n\n.allDataDiv {\n    padding: auto;\n    width: 100%;\n    height: 300px;\n    overflow: scroll;\n}\n\nthead tr th {\n    background-color: lightskyblue;\n    font-size: 14px;\n}\n\ntbody tr td {\n    font-size: 12px;\n}\n\nthead {\n    position: sticky;\n    top: 0;\n}\n\n@media (max-width: 1200px) {\n    .row {\n        margin-left: 0px;\n        width: 100%;\n        display: flex;\n        justify-content: center;\n    }\n    .row>h3{\n        display: contents;\n    }\n}\n</style>\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}