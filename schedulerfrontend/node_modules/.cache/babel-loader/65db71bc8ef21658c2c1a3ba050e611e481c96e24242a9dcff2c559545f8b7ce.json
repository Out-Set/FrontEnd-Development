{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"homePage\",\n  data() {\n    return {\n      name: \"Cron Dashboard\",\n      taskTypes: ['proc', 'api', 'method'],\n      taskType: 'proc',\n      taskNames: ['hello', 'hiii', 'byee'],\n      taskName: 'hello'\n    };\n  },\n  methods: {\n    setTaskToLS() {\n      localStorage.setItem('taskName', this.taskName);\n    },\n    stopTask(taskName) {\n      console.log('task-name: ', taskName);\n      axios.post('http://localhost:8082/tasks/stop?task=' + taskName) // Dynamic-Cron\n      .then(response => {\n        console.log(\"Response form Backend: \", response);\n        this.logs = response.data;\n      }).catch(error => {\n        // Handle the error\n        console.log(\"Error Occured!\", error);\n      });\n    },\n    startTask(taskName) {\n      console.log('task-name: ', taskName);\n      axios.post('http://localhost:8082/tasks/startAtInit?task=' + taskName) // Dynamic-Cron\n      .then(response => {\n        console.log(\"Response form Backend: \", response);\n        this.logs = response.data;\n      }).catch(error => {\n        // Handle the error\n        console.log(\"Error Occured!\", error);\n      });\n    },\n    methods: {\n      fetchTaskNames() {\n        // Fetch task names from an API or perform some other action\n        console.log('Task type selected:', this.taskType);\n        axios.get('http://localhost:8082/scheduledTask/findTaskName/proc') // Dynamic-Cron\n        .then(response => {\n          console.log(\"Response form Backend: \", response);\n          this.taskNames = response.data;\n          this.taskName = this.taskNames[0];\n        }).catch(error => {\n          // Handle the error\n          console.log(\"Error Occured!\", error);\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","taskTypes","taskType","taskNames","taskName","methods","setTaskToLS","localStorage","setItem","stopTask","console","log","post","then","response","logs","catch","error","startTask","fetchTaskNames","get"],"sources":["C:\\Users\\admin\\Desktop\\Working On\\FrontEnd-Development\\schedulerfrontend\\src\\components\\home.vue"],"sourcesContent":["<template>\r\n    <div class=\"master\">\r\n        <div>\r\n            <h2 class=\"heading\">{{ name }}</h2>\r\n        </div>\r\n\r\n        <div style=\"margin-top: 15px\">\r\n            Select Task Type\r\n            <select v-model=\"taskType\" style=\"width: 100px;\">\r\n                <option v-on:se=\"fetchTaskNames()\" v-for=\"taskType in taskTypes\" :key=\"taskType\" :value=\"taskType\">{{\r\n                    taskType }}</option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"setAndViewLogs\">\r\n\r\n            <!-- Set Expression -->\r\n            <div>\r\n                <h3 class=\"main\">Set Cron Value</h3>\r\n                <select v-model=\"taskName\" style=\"width: 100px;\">\r\n                    <option v-for=\"taskName in taskNames\" :key=\"taskName\" :value=\"taskName\">{{ taskName }}</option>\r\n                </select>&nbsp;\r\n\r\n                <router-link to=\"/scheduleTask\">\r\n                    <button v-on:click=\"setTaskToLS()\" class=\"mb-5\"\r\n                        :class=\"{ active: this.$route.path === '/scheduleTask' }\" aria-current=\"page\">Set\r\n                    </button>\r\n                </router-link>\r\n            </div>\r\n\r\n            <!-- Get Logs -->\r\n            <div>\r\n                <h3 class=\"main\">View Logs</h3>\r\n                <select v-model=\"taskName\" style=\"width: 100px;\">\r\n                    <option v-for=\"taskName in taskNames\" :key=\"taskName\" :value=\"taskName\">{{ taskName }}</option>\r\n                </select>&nbsp;\r\n\r\n                <router-link :to=\"{ path: this.cron === 'cron-1' ? '/cron1Logs' : '/cron2Logs' }\">\r\n                    <button :class=\"{ active: this.$route.path === '/cronLogs' }\" aria-current=\"page\">View\r\n                    </button>\r\n                </router-link>\r\n            </div>\r\n\r\n            <!-- Stop prog Execution -->\r\n            <div>\r\n                <h3 class=\"main\">Stop and Start</h3>\r\n                <select v-model=\"taskName\" style=\"width: 100px;\">\r\n                    <option v-for=\"taskName in taskNames\" :key=\"taskName\" :value=\"taskName\">{{ taskName }}</option>\r\n                </select>&nbsp;\r\n                <button v-on:click=\"stopTask(this.taskName)\">Stop</button>&nbsp;\r\n                <button v-on:click=\"startTask(this.taskName)\">Start</button>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: \"homePage\",\r\n    data() {\r\n        return {\r\n            name: \"Cron Dashboard\",\r\n\r\n            taskTypes: ['proc', 'api', 'method'],\r\n            taskType: 'proc',\r\n\r\n            taskNames: ['hello', 'hiii', 'byee'],\r\n            taskName: 'hello',\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        setTaskToLS() {\r\n            localStorage.setItem('taskName', this.taskName);\r\n        },\r\n\r\n        stopTask(taskName) {\r\n            console.log('task-name: ', taskName);\r\n            axios.post('http://localhost:8082/tasks/stop?task=' + taskName) // Dynamic-Cron\r\n                .then((response) => {\r\n                    console.log(\"Response form Backend: \", response);\r\n                    this.logs = response.data\r\n                })\r\n                .catch((error) => {\r\n                    // Handle the error\r\n                    console.log(\"Error Occured!\", error);\r\n                })\r\n        },\r\n\r\n        startTask(taskName) {\r\n            console.log('task-name: ', taskName);\r\n            axios.post('http://localhost:8082/tasks/startAtInit?task=' + taskName) // Dynamic-Cron\r\n                .then((response) => {\r\n                    console.log(\"Response form Backend: \", response);\r\n                    this.logs = response.data\r\n                })\r\n                .catch((error) => {\r\n                    // Handle the error\r\n                    console.log(\"Error Occured!\", error);\r\n                })\r\n        },\r\n\r\n        methods: {\r\n            fetchTaskNames() {\r\n                // Fetch task names from an API or perform some other action\r\n                console.log('Task type selected:', this.taskType);\r\n                axios.get('http://localhost:8082/scheduledTask/findTaskName/proc') // Dynamic-Cron\r\n                .then((response) => {\r\n                    console.log(\"Response form Backend: \", response);\r\n                    this.taskNames = response.data\r\n                    this.taskName = this.taskNames[0]\r\n                })\r\n                .catch((error) => {\r\n                    // Handle the error\r\n                    console.log(\"Error Occured!\", error);\r\n                })\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.master {\r\n    margin-top: 0px;\r\n    padding-top: 0px;\r\n    background: lightblue;\r\n    height: 660px;\r\n}\r\n\r\n.heading {\r\n    height: 40px;\r\n    background: lightcoral;\r\n    padding-top: 13px;\r\n    padding-left: 16px;\r\n}\r\n\r\n.main {\r\n    text-decoration: underline;\r\n    margin-bottom: 5px;\r\n}\r\n\r\n.setAndViewLogs {\r\n    display: grid;\r\n    grid-template-columns: auto auto auto;\r\n    margin-top: 50px;\r\n}\r\n\r\nselect {\r\n    padding: 3px 10px;\r\n}\r\n\r\nbutton {\r\n    border: none;\r\n    border-radius: 3px;\r\n    margin-bottom: 10px;\r\n    padding: 4px 20px;\r\n}\r\n\r\nbutton:hover {\r\n    background: #1397AA;\r\n    color: white;\r\n}\r\n</style>"],"mappings":"AA0DA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHD,IAAI,EAAE,gBAAgB;MAEtBE,SAAS,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;MACpCC,QAAQ,EAAE,MAAM;MAEhBC,SAAS,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC;MACpCC,QAAQ,EAAE;IACd;EACJ,CAAC;EAEDC,OAAO,EAAE;IACLC,WAAWA,CAAA,EAAG;MACVC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAE,IAAI,CAACJ,QAAQ,CAAC;IACnD,CAAC;IAEDK,QAAQA,CAACL,QAAQ,EAAE;MACfM,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEP,QAAQ,CAAC;MACpCN,KAAK,CAACc,IAAI,CAAC,wCAAuC,GAAIR,QAAQ,EAAE;MAAA,CAC3DS,IAAI,CAAEC,QAAQ,IAAK;QAChBJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,QAAQ,CAAC;QAChD,IAAI,CAACC,IAAG,GAAID,QAAQ,CAACd,IAAG;MAC5B,CAAC,EACAgB,KAAK,CAAEC,KAAK,IAAK;QACd;QACAP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEM,KAAK,CAAC;MACxC,CAAC;IACT,CAAC;IAEDC,SAASA,CAACd,QAAQ,EAAE;MAChBM,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEP,QAAQ,CAAC;MACpCN,KAAK,CAACc,IAAI,CAAC,+CAA8C,GAAIR,QAAQ,EAAE;MAAA,CAClES,IAAI,CAAEC,QAAQ,IAAK;QAChBJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,QAAQ,CAAC;QAChD,IAAI,CAACC,IAAG,GAAID,QAAQ,CAACd,IAAG;MAC5B,CAAC,EACAgB,KAAK,CAAEC,KAAK,IAAK;QACd;QACAP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEM,KAAK,CAAC;MACxC,CAAC;IACT,CAAC;IAEDZ,OAAO,EAAE;MACLc,cAAcA,CAAA,EAAG;QACb;QACAT,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACT,QAAQ,CAAC;QACjDJ,KAAK,CAACsB,GAAG,CAAC,uDAAuD,EAAE;QAAA,CAClEP,IAAI,CAAEC,QAAQ,IAAK;UAChBJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,QAAQ,CAAC;UAChD,IAAI,CAACX,SAAQ,GAAIW,QAAQ,CAACd,IAAG;UAC7B,IAAI,CAACI,QAAO,GAAI,IAAI,CAACD,SAAS,CAAC,CAAC;QACpC,CAAC,EACAa,KAAK,CAAEC,KAAK,IAAK;UACd;UACAP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEM,KAAK,CAAC;QACxC,CAAC;MACL;IACJ;EAEJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}